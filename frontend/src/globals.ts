import {ref} from "vue";

export const selectingPositionForPOI = ref(false);

export const perimeter = [
    [43.12487611482144, 13.067722320556642],
    [43.12755934417956, 13.061971664428713],
    [43.131140280338, 13.057422637939455],
    [43.134773202395344, 13.061714172363283],
    [43.13965851593313, 13.065061569213869],
    [43.14260204205197, 13.062744140625002],
    [43.141975771767356, 13.056135177612306],
    [43.146171660173195, 13.05356025695801],
    [43.15068035355359, 13.053388595581056],
    [43.15243364449655, 13.061971664428713],
    [43.149490591768746, 13.0667781829834],
    [43.14873915134035, 13.07398796081543],
    [43.14429293977578, 13.076648712158203],
    [43.14604641394298, 13.078880310058596],
    [43.15017940404592, 13.078880310058596],
    [43.150429879312995, 13.081884384155275],
    [43.14485656195753, 13.08600425720215],
    [43.13997166374568, 13.086862564086916],
    [43.13803012145435, 13.082399368286133],
    [43.132956768342545, 13.074674606323244],
    [43.1310150033145, 13.070898056030275],
    [43.1275697846108, 13.072185516357424],
    [43.12550256024106, 13.071241378784181],
    [43.12487611482144, 13.067722320556642]
];

export function checkCoordinate(coordinate: number[]): boolean {
    // we're going to use a ray-casting/jordan curve theorem algorithm to check if the coordinate is inside the perimeter area of the Municipality
    let intersections = 0;
    for (let i = 0, j = perimeter.length - 1; i < perimeter.length; j = i++) {
        let c1 = perimeter[i];
        let c2 = perimeter[j];
        if ((c1[0] > coordinate[0]) != (c2[0] > coordinate[0])) {
            if (coordinate[1] < (c2[1] - c1[1]) * (coordinate[0] - c1[0]) / (c2[0] - c1[0]) + c1[1]) {
                intersections++;
            }
        }
    }
    return intersections % 2 != 0;
}
